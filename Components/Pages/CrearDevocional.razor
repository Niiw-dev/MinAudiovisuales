@page "/crear-devocional"
@using Microsoft.Net.Http.Headers
@using MinAudiovisual.Diary.Domain.Dto
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@inject HttpClient Http
@rendermode InteractiveServer

<style>
    .input-pair {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .input-block {
        flex: 1 1 250px;
        min-width: 200px;
    }

    .input-block label {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .input-block .form-control {
        height: 34px;
        font-size: 0.9rem;
    }
</style>

<div class="container my-4">
    <div class="row g-4">
        <!-- Subir Devocional -->
        <div class="col-12">
            <div class="card shadow p-4">
                <h3 class="mb-4">Subir Devocional</h3>

                <EditForm Model="@devocionalUp" OnValidSubmit="SubirDevocional" FormName="SubirDevocionalForm">
                    <div class="input-pair">
                        <div class="input-block">
                            <label>Nombre:</label>
                            <InputText name="nameUp" class="form-control" @bind-Value="devocionalUp.Nombre" />
                        </div>

                        <div class="input-block">
                            <label>Selecciona imagen:</label>
                            <InputFile class="form-control" OnChange="OnInputFileChange" />
                        </div>
                        <button class="btn btn-primary w-100 mt-2" type="submit">Subir Devocional</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(mensajeExito))
                    {
                    <div class="alert alert-success mt-3">@mensajeExito</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(mensajeError))
                    {
                    <div class="alert alert-danger mt-3">@mensajeError</div>
                    }
                </EditForm>
            </div>
        </div>

        <!-- Hacer Devocional -->
        <div class="col-12">
            <div class="card shadow p-4">
                <h3 class="mb-4">Hacer Devocional</h3>

                <EditForm Model="@devocionalCreate" OnValidSubmit="GenerarPDF" FormName="CrearDevocionalForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre:</label>
                        <InputText name="nameCreate" @bind-Value="devocionalCreate.Nombre" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tema:</label>
                        <InputText @bind-Value="devocionalCreate.Tema" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Versículos:</label>
                        <InputTextArea class="form-control" @bind-Value="devocionalCreate.Versiculos" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Promesa o Mandamiento:</label>
                        <InputTextArea class="form-control" @bind-Value="devocionalCreate.Promesa" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Para poner en práctica:</label>
                        <InputTextArea class="form-control" @bind-Value="devocionalCreate.Practica" />
                    </div>

                    <button class="btn btn-primary w-100" type="submit">Guardar y Generar PDF</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private DevocionalDto devocionalUp = new();
    private DevocionalDto devocionalCreate = new();

    private async Task GenerarPDF()
    {
        var response = await Http.PostAsJsonAsync("api/devocional/generar-pdf", devocionalCreate);
        var stream = await response.Content.ReadAsStreamAsync();
        using var fs = new FileStream("devocional.pdf", FileMode.Create);
        await stream.CopyToAsync(fs);
    }

    private IBrowserFile? imagen;
    private string mensajeExito = "";
    private string mensajeError = "";

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        imagen = e.File;
    }

    private async Task SubirDevocional()
    {
        mensajeExito = "";
        mensajeError = "";

        if (imagen is null || string.IsNullOrWhiteSpace(devocionalUp.Nombre))
        {
            mensajeError = "Faltan datos.";
            return;
        }

        var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(imagen.OpenReadStream(maxAllowedSize: 10_000_000));

        fileContent.Headers.ContentType = !string.IsNullOrWhiteSpace(imagen.ContentType)
            ? new MediaTypeHeaderValue(imagen.ContentType)
            : new MediaTypeHeaderValue("image/png");

        content.Add(fileContent, "imagen", imagen.Name);
        content.Add(new StringContent(devocionalUp.Nombre), "nombre");

        var response = await Http.PostAsync("api/devocional/subir-devocional", content);

        if (response.IsSuccessStatusCode)
        {
            mensajeExito = "✅ Devocional creado con éxito.";
            devocionalUp = new();
            imagen = null;
            StateHasChanged();
            await Task.Delay(3000);
            mensajeExito = "";
        }
        else
        {
            var errorDetalle = await response.Content.ReadAsStringAsync();
            mensajeError = $"❌ Error al generar el PDF. {errorDetalle}";
        }
    }
}