@page "/crear-devocional"
@using Microsoft.Net.Http.Headers
@using MinAudiovisual.Diary.Domain.Dto
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@using MudBlazor
@inject HttpClient Http
@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
<script src="_framework/blazor.server.js"></script>
<script src="_content/MudBlazor/MudBlazor.min.js"></script>

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-4" Style="width:100%">

    <!-- Subir Devocional -->
    <MudPaper Elevation="4" Class="p-6 mb-6" Style="padding: 40px 30px; width:100%">
        <MudText Typo="Typo.h5" Class="mb-4">Subir Devocional</MudText>

        <MudForm @ref="formUp" Model="@devocionalUp">
            <MudTextField @bind-Value="devocionalUp.Nombre" Label="Nombre" Required="true" />
            <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="1" 
                    Class="my-4 w-auto" MaxFileSize="10000000">
                <ActivatorContent>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload" Class="w-100">
                        Subir Imagen
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            
            @if (files != null)
            {
                <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                <MudList T="string">
                    @foreach (var file in files)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                            @file.Name <code>@file.Size bytes</code>
                        </MudListItem>
                    }
                </MudList>
            }

            <MudButton OnClick="SubirDevocional" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4 w-100">
                Enviar Devocional
            </MudButton>

            @if (!string.IsNullOrWhiteSpace(mensajeExito))
            {
                <MudAlert Severity="Severity.Success" Class="mt-3">@mensajeExito</MudAlert>
            }
            @if (!string.IsNullOrWhiteSpace(mensajeError))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">@mensajeError</MudAlert>
            }
        </MudForm>
    </MudPaper>

    <!-- Hacer Devocional -->
    <MudPaper Elevation="4" Class="p-6" Style="padding: 40px 30px; width:100%">
        <MudText Typo="Typo.h5" Class="mb-4">Hacer Devocional</MudText>

        <MudForm @ref="formCreate" Model="@devocionalCreate">
            <MudTextField @bind-Value="devocionalCreate.Nombre" Label="Nombre" Required="true" Class="mb-3" Clearable="true" Immediate="true"/>
            <MudTextField @bind-Value="devocionalCreate.Tema" Label="Tema" Required="true" Class="mb-3" Clearable="true" Immediate="true"/>
            <MudTextField @bind-Value="devocionalCreate.Versiculos" Label="Versículos" Required="true" AutoGrow Lines="2" Class="mb-3" Clearable="true" Immediate="true"/>
            <MudTextField @bind-Value="devocionalCreate.Promesa" Label="¿Que me habló Dios" Required="true" AutoGrow Lines="4" Class="mb-3" Clearable="true" Immediate="true"/>
            <MudTextField @bind-Value="devocionalCreate.Practica" Label="Para poner en práctica" Required="true" AutoGrow Lines="4" Class="mb-3" Clearable="true" Immediate="true"/>

            <MudButton OnClick="GenerarPDF" Variant="Variant.Filled" Color="Color.Primary" Class="w-100">
                Guardar y Generar PDF
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private DevocionalDto devocionalUp = new();
    private DevocionalDto devocionalCreate = new();

    private MudForm? formUp;
    private MudForm? formCreate;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    IBrowserFile? imagen;
    private string mensajeExito = "";
    private string mensajeError = "";

    private async Task GenerarPDF()
    {
        var response = await Http.PostAsJsonAsync("api/devocional/generar-pdf", devocionalCreate);
        var stream = await response.Content.ReadAsStreamAsync();
        using var fs = new FileStream("devocional.pdf", FileMode.Create);
        await stream.CopyToAsync(fs);
    }

    private void UploadFiles2(IBrowserFile file)
    {
        if (files.Count > 0)
        {
            files[0] = file;
        }
        else
        {
            files.Add(file);
        }
        imagen = files[0];
    }

    private async Task SubirDevocional()
    {
        mensajeExito = "";
        mensajeError = "";

        if (!files.Any() || string.IsNullOrWhiteSpace(devocionalUp.Nombre))
        {
            mensajeError = "Faltan datos.";
            return;
        }

        if (files.Count >= 2)
        {
            mensajeError = "Solo se permite un archivo";
            return;
        }

        using var content = new MultipartFormDataContent();
        using var fileContent = new StreamContent(imagen!.OpenReadStream(maxAllowedSize: 10_000_000));

        fileContent.Headers.ContentType = !string.IsNullOrWhiteSpace(imagen.ContentType)
            ? new MediaTypeHeaderValue(imagen.ContentType)
            : new MediaTypeHeaderValue("image/png");

        content.Add(fileContent, "imagen", imagen.Name);
        content.Add(new StringContent(devocionalUp.Nombre), "nombre");

        var response = await Http.PostAsync("api/devocional/subir-devocional", content);

        if (response.IsSuccessStatusCode)
        {
            mensajeExito = "✅ Devocional creado con éxito.";
            devocionalUp = new();
            files.Clear();
            imagen = null;
            StateHasChanged();
            await Task.Delay(3000);
            mensajeExito = "";
        }
        else
        {
            var errorDetalle = await response.Content.ReadAsStringAsync();
            mensajeError = $"❌ Error al generar el PDF. {errorDetalle}";
        }
    }
}
